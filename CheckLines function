This function is to check on the horizontal line board[x][y] == 0, what other numbers (other than zero) are present on the line.
Once we know what are the numbers we have, it reduces the number of possibilities we can check that specific box.

Objective
1. Check what are the numbers to be eliminated (already present on the line)
2. Collect the numbers into an array
3. Return the array [Bonus]

[STRATEGY]

***KEEP X CONSTANT*****
STEP I.) First we can initialise a masterlist ==> int masterlst[9]={1,2,3,4,5,6,7,8,9};
STEP 2.) from y=0 to y=8 : find all non-zero integers
STEP 3.) Then, find the complement set a.k.a the possible answer for that grid in the board.
***NEXT KEEP Y CONSTANT****
We are now checking on the vertical side.
First we can initialise a masterlist ==> int masterlst[9]={1,2,3,4,5,6,7,8,9};
from x=0 to x=8 : find all non-zero integers
Then, find the complement set a.k.a the possible answer for that grid in the board.

Final step: From the 2 arrays..Find the intersection between the 2 arrays and get the final answer!!

[IMPLEMENTATION]

STEP 1 IS Q EASY

STEP 2 IS DONE
update: WE DO NOT find the complement first. We can just find the union of the 3 eliminated answers arrays 
then after that find the complement set altogether for the masterlst. Store the possible answer array in a
statistic when initialised.

Update:

We find all the impossible numbers from line, column and square and merge them into a larger array
After, we remove its duplicates and then find the complement from the answwer.

To do:
implement the duplicate remover[by 12 August 2019]
implement the complement(commented) [by 19 August 2019]
